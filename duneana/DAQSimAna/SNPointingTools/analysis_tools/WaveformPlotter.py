import argparse
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages

plt.rcParams["axes.grid"]="True"
plt.rcParams["grid.alpha"]=0.4
plt.rcParams["axes.spines.top"]='False'
plt.rcParams["axes.facecolor"]='midnightblue'
plt.rcParams["axes.spines.right"]='False'
plt.rcParams['figure.figsize'] = (16,3)
plt.rcParams.update({'font.size': 14})

'''
 Simple plotting script which allows to visualise waveforms (in particular before and after filtering). 
 The script is designed to process ADC data generated by the WaveformThreshDump_module 
 in the DAQSimAna/SNPointingTools repository.

 Example usage to plot 10 induction waveforms from U plane: 
 python WaveformPlotter.py -i waveforms_t40_protoDUNEnoise.txt -p 0 -n 10

'''

def main():
    parser = argparse.ArgumentParser(description="Generate waveform plots and save to a PDF file")
    parser.add_argument("-i", "--input", required=True, help="Input file")
    parser.add_argument("-o", "--output", default="waveforms.pdf", help="Output PDF file name (default: waveforms.pdf)")
    parser.add_argument("-e", "--event", type=int, default=None, help="Event number to plot")
    parser.add_argument("-p", "--plane", type=int, default=None, help="Plane number to select")
    parser.add_argument("-n", "--num-waveforms", type=int, default=None, help="Number of waveforms to plot (default: 6)")
    parser.add_argument("-ch", "--channel", type=int, default=None, help="Channel number to plot")
    args = parser.parse_args()

    #"Absolute" Running Sum algorithm
    def AbsRunningSum(data, R):
        #Initialize 
        RS = []; 
        I_RS = data[0] /2
        RS.append(I_RS )
        i_current = 0

        for i in range(1,len(data)): 

            i_current = R*I_RS + abs(data[i])/2
            I_RS = i_current

            RS.append(I_RS)

        return np.array(RS) - np.mean(RS)

    
    # Load data from the input file
    wave = np.loadtxt(args.input)
    dx = 200

    #Filter events 
    #Select waveforms from specific event
    if args.event is not None:
        wave = wave[wave[:,0] == args.event] 

    # Select waveforms from the specific plane       
    if args.plane is not None:
        wave = wave[wave[:, 2] == args.plane]
        
    # Select waves from the specific channel
    if args.channel is not None:
        wave = wave[wave[:, 1] == args.channel]
        
    if args.num_waveforms is None:
        # Set the default value of num-waveforms to the number of (filtered) waveforms
        args.num_waveforms = len(wave)

    with PdfPages(args.output) as pdf:
        for i in range(args.num_waveforms):
            x = wave[i, 3:]
            x = x - np.mean(x)  # Hacky pedestal subtraction
            y = np.array(AbsRunningSum(x, 0.9), dtype='int')

            fig, (ax0, ax1) = plt.subplots(1, 2, sharex=True, sharey=True)

            # Plot the waveform in the first subplot
            ax0.plot(x, c='white', label='raw waveform')

            # Plot the running sum in the second subplot
            ax1.plot(y, c='salmon', label='AbsRS waveform')

            # Set xlim for both subplots
            for ax in [ax0, ax1]:
                ax.set_xlim(np.argmax(x) - dx, np.argmax(x) + dx)
                ax.legend(labelcolor='white')
                ax.set_xlabel("Time [tick]")
                ax.set_ylabel("Amplitude [ADC]")

            plt.tight_layout()
            pdf.savefig(fig)
            plt.close()

if __name__ == "__main__":
    main()
