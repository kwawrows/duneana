# The detsim fcl I used following the G4 stage (prior to any DAQSimAna files).
# This fhcil reverts back to using DUNEWireSim for the DAQ signal simulation,
# and outputs noiseless waveforms (without any 0 supression) containing the modelled signal for a single readout window. 
# WaveformDump or TPStreamer was used on the resulting detsim files. 

#include "standard_detsim_dune10kt_1x2x6.fcl"

physics.producers:
{
    @table::physics.producers
    daq:                   @local::dune_detsim
    tpcrawdecoder:         @erase
}

physics.simulate[0]: daq #terrible way of changing the running producer from wirecell to the older detsim.  Erasing tpcrawdecoder does provide a small amount of protection against us replacing the wrong array element (as the job will not run)

# Use fixed values instead of DB for pedestals.
services.DetPedestalService: @local::dune_fixedpeds

# DetSim flags.
physics.producers.daq.NoiseOn:     false #true
physics.producers.daq.PedestalOn:  false #true
physics.producers.daq.DistortOn:   false
physics.producers.daq.SuppressOn:  false #true
physics.producers.daq.SimChannelLabel: "elecDrift"

# DetSim services.
services.SimChannelExtractService: @local::scxgeneric
services.ChannelNoiseService:      @local::chnoiseold
services.PedestalAdditionService:  @local::padprovided
services.AdcDistortService:        @local::stuckbits
services.AdcSuppressService:       @local::zsnone #@local::zslegacy
services.AdcCompressService:       @local::cmpreplace #@local::cmpblock

# Geometry 
services.Geometry.GDML: "dune10kt_v4_refactored_1x2x6.gdml"
services.Geometry.Name: "dune10kt_v4_refactored_1x2x6"
services.Geometry.ROOT: "dune10kt_v4_refactored_1x2x6.gdml"
